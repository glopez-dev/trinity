# The names and order of the pipeline stages.
stages:
  - setup
  - build
  - test
  - package 
  - publish
  - clean
  - deploy

variables:
  FRONTEND_IMAGE: "${DOCKER_HUB_USERNAME}/t-dev-701-frontend"
  NODE_VERSION: "20.10.0"

###############
# BUILD STAGE #
###############

Build Frontend dev image:
  stage: build 
  image: docker:latest
  script:
    - pwd && ls
    - cd frontend
    - docker build 
        --tag ${FRONTEND_IMAGE}:dev-${CI_COMMIT_SHORT_SHA} 
        --build-arg NEXT_PUBLIC_ENVIRONMENT=dev
        --file Dockerfile.dev
        .
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker push ${FRONTEND_IMAGE}:dev-${CI_COMMIT_SHORT_SHA}

##############
# TEST STAGE #
##############

# Removed for the moment as I can't manage to run it in non interactive mode
# Lint Frontend codebase:
#   stage: test 
#   image: node:${NODE_VERSION}
#   script:
#     - docker run --rm -e CI=1 $FRONTEND_IMAGE:dev-$CI_COMMIT_SHORT_SHA npm run lint

Run Frontend tests:
  stage: test
  image: node:${NODE_VERSION}
  script:
    - docker run --rm -e CI=1 $FRONTEND_IMAGE:dev-$CI_COMMIT_SHORT_SHA npm run test  
  needs: ['Build Frontend dev image']

#################
# PACKAGE STAGE #
#################

Build Frontend prod image:
  stage: package 
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd frontend
    - docker build 
        -t ${FRONTEND_IMAGE}:prod-${CI_COMMIT_SHORT_SHA} 
        -t ${FRONTEND_IMAGE}:latest
        --build-arg NEXT_PUBLIC_ENVIRONMENT=production
        --file Dockerfile.dev
        .
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Build Frontend draft image:
  stage: package 
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd frontend 
    - docker build 
        --tag ${FRONTEND_IMAGE}:draft-${CI_MERGE_REQUEST_IID} 
        --build-arg NEXT_PUBLIC_ENVIRONMENT=draft
        --file Dockerfile.dev
        .
  rules:
    - if: $CI_MERGE_REQUEST_IID


#################
# PUBLISH STAGE #
#################

Publish Frontend prod image: 
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker push ${FRONTEND_IMAGE}:prod-${CI_COMMIT_SHORT_SHA}
    - docker push ${FRONTEND_IMAGE}:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Publish Frontend draft image:
  stage: publish 
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
    - docker push $FRONTEND_IMAGE:draft-$CI_MERGE_REQUEST_IID
  rules:
    - if: $CI_MERGE_REQUEST_IID

###############
# CLEAN STAGE #
###############

Delete Frontend prod artifacts:
  stage: clean 
  script:
    - docker image rm ${FRONTEND_IMAGE}:prod-${CI_COMMIT_SHORT_SHA}
    - docker image rm ${FRONTEND_IMAGE}:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Delete Frontend draft artifacts:
  stage: clean 
  script:
    - docker image rm $FRONTEND_IMAGE:draft-$CI_MERGE_REQUEST_IID
  rules:
    - if: $CI_MERGE_REQUEST_IID

Delete Frontend dev artifacts:
  stage: clean 
  script:
    - docker image rm $FRONTEND_IMAGE:dev-$CI_COMMIT_SHORT_SHA

# # Development deployment
# deploy-development:
#   stage: deploy
#   image: 
#     name: bitnami/kubectl:latest
#     entrypoint: ['']
#   script:
#     - kubectl config set-cluster k8s --server="$KUBE_URL"
#     - kubectl config set-credentials admin --token="$KUBE_TOKEN"
#     - kubectl config set-context default --cluster=k8s --user=admin
#     - kubectl config use-context default
#     - sed -i "s/__VERSION__/${CI_COMMIT_SHORT_SHA}/g" kubernetes/frontend-deployment.yaml
#     - kubectl apply -f kubernetes/frontend-deployment.yaml
#   only:
#     - main

# Production deployment
Deploy Frontend to prod env:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config set-cluster k8s --server="$KUBE_URL"
    - kubectl config set-credentials admin --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=admin
    - kubectl config use-context default
    - sed -i "s/__VERSION__/${CI_COMMIT_TAG}/g" kubernetes/frontend-production-deployment.yaml
    - kubectl apply -f kubernetes/frontend-production-deployment.yaml
  only:
    - tags
  when: manual