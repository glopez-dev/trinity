volumes:
  postgres_data:
    driver: local

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

services:
  backend-app:
    image: backend-api
    container_name: backend-api
    build:
      context: ./backend
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: 'postgres:15-alpine'
    container_name: postgres_db
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=myuser
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U myuser -d mydatabase" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbit-mq:
    container_name: rabbit_mq
    image: 'rabbitmq:latest'
    environment:
      - 'RABBITMQ_DEFAULT_PASS=secret'
      - 'RABBITMQ_DEFAULT_USER=myuser'
    ports:
      - '5672:5672'

  frontend:
    container_name: next-js-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - '3000:3000'
    command: npm run dev
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    networks:
      - frontend
      - backend
    depends_on:
      - backend-app