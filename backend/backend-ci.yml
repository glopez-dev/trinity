# Backend CI pipeline 
default:
  cache:
    key: ${CI_COMMIT_REF_SLUG}-maven
    paths:
      - .m2/repository
      - backend/target/
    policy: pull-push

# The names and order of the pipeline stages.
stages:
  - setup
  - build
  - test
  - package
  - deploy

# Define CI/CD variables for all jobs in the pipeline
variables:
  # Maven command-line options to use a custom settings file and run in batch mode
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  # Maven configuration to specify a local repository path within the CI project directory
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Xmx2g -XX:+UseParallelGC -T 4"
  # Name of the backend Docker image including the Docker Hub prefix
  BACKEND_IMAGE: "${DOCKER_HUB_USERNAME}/t-dev-701-backend"

###############
# BUILD STAGE #
###############

Compile Backend code:
  stage: build
  # Setup
  image: eclipse-temurin:21-jdk-jammy
  # Scripts
  script:
    - cd backend
    - chmod +x mvnw
    - ./mvnw -T 4 compile $MAVEN_CLI_OPTS $MAVEN_OPTS
  # Caching
  cache:
    policy: pull-push
  artifacts:
    paths:
      - backend/target/

Build the Backend dev image:
  stage: build
  # Setup
  variables:
    BACKEND_IMAGE_TAG_DEV: $BACKEND_IMAGE:dev-$CI_COMMIT_SHORT_SHA
  # Scripts
  before_script:
    # Connect to the Docker Hub registry using the CI/CD variables defined on Gitlab website.
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    # Build a developement Docker image with the specific commit codebase.
    - docker build --tag $BACKEND_IMAGE_TAG_DEV --target dev ./backend
    # Publish the image so the others jobs can pull it.
    - docker push $BACKEND_IMAGE_TAG_DEV
  # Delete the image from the host Docker's registry after pushing to Docker Hub.
  after_script:
    - docker image rm $BACKEND_IMAGE_TAG_DEV
  # Conditions
  needs: ['Compile Backend code']

##############
# TEST STAGE #
##############

Run Backend unit-tests:
  stage: test
  variables:
    BACKEND_IMAGE_TAG_DEV: ${BACKEND_IMAGE}:dev-${CI_COMMIT_SHORT_SHA}
  # Scripts
  script:
    - cd backend
    - docker run --rm -v $(pwd)/target:/app/backend/target $BACKEND_IMAGE_TAG_DEV test
  artifacts:
    when: always
    reports:
      junit: backend/target/surefire-reports/TEST-*.xml
    expire_in: 1 week
  # Conditions
  needs: ['Build the Backend dev image']

#################
# PACKAGE STAGE #
#################
Build the Backend prod image:
  stage: package
  variables:
    BACKEND_IMAGE_TAG_PROD: $BACKEND_IMAGE:prod-$CI_COMMIT_SHORT_SHA
  # Scripts
  before_script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    - cd backend
    - docker build -t $BACKEND_IMAGE_TAG_PROD -t $BACKEND_IMAGE:latest --target prod .
    - docker push $BACKEND_IMAGE_TAG_PROD
    - docker push $BACKEND_IMAGE:latest
  after_script:
    - docker image rm $BACKEND_IMAGE_TAG_PROD
    - docker image rm $BACKEND_IMAGE:latest
  # Conditions
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Build the Backend draft image:
  stage: package
  variables:
    BACKEND_IMAGE_TAG_DRAFT: $BACKEND_IMAGE:draft-$CI_MERGE_REQUEST_IID
  # Scripts
  before_script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    - cd backend
    - docker build -t $BACKEND_IMAGE_TAG_DRAFT --target prod .
    - docker push $BACKEND_IMAGE_TAG_DRAFT
  after_script:
    - docker image rm $BACKEND_IMAGE_TAG_DRAFT
  # Conditions
  rules:
    - if: $CI_MERGE_REQUEST_IID
