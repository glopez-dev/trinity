# Backend CI pipeline 

# The names and order of the pipeline stages.
stages:
  - setup
  - build
  - test
  - package 
  - publish
  - deploy

# Define CI/CD variables for all jobs in the pipeline
variables:
  # Maven command-line options to use a custom settings file and run in batch mode
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  # Maven configuration to specify a local repository path within the CI project directory
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  # Name of the backend Docker image including the Docker Hub prefix
  BACKEND_IMAGE: "${DOCKER_HUB_USERNAME}/t-dev-701-backend"

###############
# BUILD STAGE #
###############

Compile Backend code:
  stage: build 
  # Setup
  image: eclipse-temurin:21-jdk-jammy
  # Scripts
  script:
    - cd backend
    - chmod +x mvnw
    - ./mvnw compile
  # Caching
  artifacts:
    paths:
      - backend/target/

Build the Backend dev image:
  stage: build 
  # Setup
  image: docker:latest
  variables:
    BACKEND_IMAGE_TAG_DEV: $BACKEND_IMAGE:dev-$CI_COMMIT_SHORT_SHA
  # Scripts
  before_script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    - docker build --tag $BACKEND_IMAGE_TAG_DEV --target dev ./backend 
    - docker push $BACKEND_IMAGE_TAG_DEV # Publish the image so the others jobs quand pull it.
  after_script:
    - docker image rm $BACKEND_IMAGE:dev-$CI_COMMIT_SHORT_SHA
  # Conditions
  needs: ['Compile Backend code'] 
  rules:
    - changes:
        - backend/**/*

##############
# TEST STAGE #
##############

Run Backend unit-tests:
  stage: test
  # Setup
  image: docker:latest
  # Scripts
  script:
    - cd backend
    - docker run --rm ${BACKEND_IMAGE}:dev-${CI_COMMIT_SHORT_SHA} ./mvnw test
  # Conditions
  needs: ['Build the Backend dev image']
  rules:
    - changes:
        - backend/**/*

#################
# PACKAGE STAGE #
#################
Build the Backend prod image:
  stage: package 
  # Setup
  image: docker:latest  
  # Scripts
  script:
    - cd backend
    - docker build -t $BACKEND_IMAGE:prod-$CI_COMMIT_SHORT_SHA -t $BACKEND_IMAGE:latest --target prod .
  # Conditions
  rules:
    - changes:
        - backend/**/*
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Build the Backend draft image:
  stage: package 
  # Setup
  image: docker:latest  
  # Scripts
  script:
    - cd backend
    - docker build -t $BACKEND_IMAGE:draft-$CI_MERGE_REQUEST_IID --target prod .
  # Conditions
  rules:
    - changes:
        - backend/**/*
    - if: $CI_MERGE_REQUEST_IID

#################
# PUBLISH STAGE #
#################

Publish the Backend prod image:
  stage: publish 
  # Setup
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    BACKEND_IMAGE_TAG_PROD: $BACKEND_IMAGE:prod-$CI_COMMIT_SHORT_SHA
  # Scripts
  before_script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    - docker push $BACKEND_IMAGE_TAG_PROD
    - docker push $BACKEND_IMAGE:latest
  after_script:
    - docker image rm $BACKEND_IMAGE_TAG_PROD 
    - docker image rm $BACKEND_IMAGE:latest
  # Conditions
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

Publish the Backend draft image:
  stage: publish 
  # Setup
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
    BACKEND_IMAGE_TAG_DRAFT: $BACKEND_IMAGE:draft-$CI_MERGE_REQUEST_IID
  # Scripts
  before_script:
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
  script:
    - docker push $BACKEND_IMAGE_TAG_DRAFT
  after_script:
    - docker image rm $BACKEND_IMAGE_TAG_DRAFT
  # Conditions
  rules:
    - if: $CI_MERGE_REQUEST_IID

################
# DEPLOY STAGE #
################

Deploy Backend to production:
  stage: deploy
  script:
    - echo "Deploying to production server"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual