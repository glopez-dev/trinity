###################
# YAML extensions #
###################

x-backend-env: &backend-env
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
  SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
  SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

x-backend-common: &backend-common
  ports: 
    - 8080:8080
  networks: 
    - backend
  depends_on:
    postgres:
      condition: service_healthy
  # Fix the rabbitmq healthcheck first
  #   rabbitmq:
  #    condition: service_healthy

x-backend-healthcheck: &backend-healthcheck
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    interval: 30s
    timeout: 10s
    retries: 5
    start_period: 30s

x-frontend-common: &frontend-common
  labels:
    org.springframework.boot.service-connection: frontend

  ports:
    - '3000:3000'
    
  networks:
    - frontend
    - backend

##################
# DOCKER COMPOSE #
##################

# The .env file should be in the same directory as your Compose file. 
# Docker Compose will automatically load it.

name: trinity
  
volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

services:

  postgres:
    extends:
      file: ./devops/compose/postgres.yml
      service: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
  
  rabbitmq:
    extends:
      file: ./devops/compose/rabbitmq.yml
      service: rabbitmq
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

###############
# DEVELOPMENT #
###############

  backend_dev:
    profiles: ['development']
    <<: *backend-common # Insert YAML extension

    image: t-dev-701-backend:dev
    pull_policy: build
    build:
      context: ./backend
      target: dev

    environment:
      SPRING_PROFILES_ACTIVE: dev 
      <<: *backend-env # Insert YAML extension

  
  frontend_dev:
    profiles: ['development']
    <<: *frontend-common

    image: t-dev-701-frontend:dev
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev

    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules

    environment:
      NEXT_PUBLIC_API_URL: http://backend_dev:8080
      NEXT_PUBLIC_ENVIRONMENT: dev

##############
# PRODUCTION #
##############

  backend_prod:
    profiles: ['production']
    <<: *backend-common # Insert YAML extension

    image: silica5518/t-dev-701-backend:latest

    environment:
      <<: *backend-env
      SPRING_PROFILES_ACTIVE: prod
  
  frontend_prod:
    profiles: ['production']
    <<: *frontend-common # Insert YAML extension

    image: silica5518/t-dev-701-frontend:latest 

    environment:
      NEXT_PUBLIC_API_URL: http://backend_prod:8080/api/v1
      NEXT_PUBLIC_ENVIRONMENT: prod
